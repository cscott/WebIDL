/**
 * Wikipeg grammar for reading WebIDL
 * 2021-01-27 C. Scott Ananian <cananian@wikimedia.org>
 *
 * Current grammar is based on 29afaf0a97d0175fc3749628140f944dceddb2c5
 * of spec at https://heycam.github.io/webidl/ (2021-01-15)
 *
 * PLEASE UPDATE THE ABOVE COMMIT HASH WHEN FURTHER UPDATES ARE MADE.
 * (And try to keep productions in the same order as in the spec.)
 */
{
/* File-scope initializer */
namespace Wikimedia\WebIDL;
}
{
	/** @var string */
	private $filename = '';
	/** @var int */
	private $lineNum = 1;

	/**
	 * @param string $filename
	 * @param string $contents
	 * @return array
	 */
	public static function load( string $filename, string $contents ) {
		$g = new Grammar();
		$g->filename = $filename;
		return $g->parse( $contents );
	}

	private static $basicType = [
		'type' => null,
		'extAttrs' => [],
		'generic' => '',
		'nullable' => false,
		'union' => false,
		'idlType' => null,
	];

	private static $basicExtAttr = [
		'type' => 'extended-attribute',
		'name' => null,
		'arguments' => [],
		'rhs' => null,
	];

	private static function setType(array &$t, string $val): array {
		if ( ($t['type'] ?? null) !== null) {
			return $t;
		}
		$t['type'] = $val;
		if (is_array($t['idlType'] ?? null)) {
			if ($t['generic'] === '' && $t['union'] === false) {
				self::setType($t['idlType'], $val);
			} else if ($t['union'] === false) {
				foreach ($t['idlType'] as &$tt) {
					self::setType($tt, $val);
				}
			}
		}
		return $t;
	}
}

start = _ d:Definitions { return $d; }

/* Line number bookkeeping.
 * Be careful about backtracking after you successfully match this production.
 */
eol = nl:("\n" / "\r\n" / "\r") { $this->lineNum++; return $nl; }

/* WebIDL terminals */
integer = m:opt_minus n:( decimal_integer / hex_integer / octal_integer ) {
    return $m * $n;
}

opt_minus = "-" { return -1; } / "" { return 1; }

decimal_integer = s:$( [1-9] [0-9]* ) { return intval($s); }

hex_integer = ("0x" / "0X" ) s:$( [0-9A-Fa-f]+ ) { return hexdec($s); }

octal_integer = s:$( "0" [0-7]* ) { return octdec( $s ); }

decimal = s:$( m:opt_minus (
    ( [0-9]+ "." [0-9]* / [0-9]* "." [0-9]+ ) ( [Ee] [+-]? [0-9]+ )?
  /  [0-9]+ [Ee] [+-]? [0-9]+
) ) { return floatval( $s ); }

identifier =
    // We need to ensure that other "quoted string" terminals defined
    // later in the grammar take precedence over this production.
    !(ArgumentNameKeyword / BufferRelatedType / OtherIdLike)
    // weird special case reserved identifiers:
    !( ( "_constructor" / "_toString" / "toString" ) i_ )
    s:$( [-_]? [A-Za-z] [-_0-9A-Za-z]* ) {
        return $s[0] == "_" ? substr($s, 1) : $s ;
    }

string = "\"" s:$([^\"]*) "\"" { return $s; }

whitespace = ( [\t ] / eol )+

comment = "//" [^\n\r]* / "/*" ( [^\n\r*]+ / eol / "*" !"/" )* "*/"

otherchar = !otherterminals ![()\[\]{},] [^\t\n\r 0-9A-Za-z]

/* The 'ignore' production -- we have to include this after every
 * terminal; nonterminals are assumed to include it as trailing context.
 */
_ = ( whitespace / comment )*

/* This is a variant used after "identifier-like" terminals to ensure
 * they don't run together.
 */
i_ = ![-_0-9A-Za-z] _

/* WebIDL non-terminals */
Definitions = (
    e:ExtendedAttributeList d:Definition {
        $d['extAttrs'] = $e; return $d;
    }
)*

Definition =
    CallbackOrInterfaceOrMixin
  / Namespace
  / Partial
  / Dictionary
  / Enum
  / Typedef
  / IncludesStatement

ArgumentNameKeyword = k:$(
    "async"
  / "attribute"
  / "callback"
  / "const" ![-_0-9A-Za-z] // prefix of another keyword!
  / "constructor"
  / "deleter"
  / "dictionary"
  / "enum"
  / "getter"
  / "includes"
  / "inherit"
  / "interface"
  / "iterable"
  / "maplike"
  / "mixin"
  / "namespace"
  / "partial"
  / "readonly"
  / "required"
  / "setlike"
  / "setter"
  / "static"
  / "stringifier"
  / "typedef"
  / "unrestricted" ) i_ { return $k; }

CallbackOrInterfaceOrMixin =
    "callback" i_ c:CallbackRestOrInterface { return $c; }
  / "interface" i_ im:InterfaceOrMixin { return $im; }

InterfaceOrMixin =
    InterfaceRest
  / MixinRest

InterfaceRest =
    name:identifier _ inh:Inheritance "{" _ m:InterfaceMembers "}" _ ";" _ {
    return [
        'type' => 'interface',
        'name' => $name,
        'inheritance' => $inh,
        'members' => $m,
        'partial' => false,
    ];
}

Partial = "partial" i_ p:PartialDefinition {
    $p['partial'] = true; return $p;
}

PartialDefinition =
    "interface" i_ p:PartialInterfaceOrPartialMixin { return $p; }
  / PartialDictionary
  / Namespace

PartialInterfaceOrPartialMixin =
    PartialInterfaceRest
  / MixinRest

PartialInterfaceRest =
    name:identifier _ "{" _ m:PartialInterfaceMembers "}" _ ";" _ {
    return [
        'type' => 'interface',
        'name' => $name,
        'inheritance' => null,
        'members' => $m,
    ];
}

InterfaceMembers = (
    e:ExtendedAttributeList m:InterfaceMember {
      $m['extAttrs'] = $e; return $m;
    }
)*

InterfaceMember =
    PartialInterfaceMember
  / Constructor

PartialInterfaceMembers = (
    e:ExtendedAttributeList m:PartialInterfaceMember {
      $m['extAttrs'] = $e; return $m;
    }
)*

PartialInterfaceMember =
    Const
  / Operation
  / Stringifier
  / StaticMember
  / Iterable
  / AsyncIterable
  / ReadOnlyMember
  / ReadWriteAttribute
  / ReadWriteMaplike
  / ReadWriteSetlike
  / InheritAttribute

Inheritance =
    ( ":" _ name:identifier _ {return $name;} )?

MixinRest = "mixin" i_ name:identifier _ "{" _ m:MixinMembers "}" _ ";" _ {
    return [
        'type' => 'interface mixin',
        'name' => $name,
        'inheritance' => null,
        'partial' => false,
        'members' => $m,
    ];
}

MixinMembers = (
    e:ExtendedAttributeList m:MixinMember {
      $m['extAttrs'] = $e; return $m;
    }
)*

MixinMember =
    Const
  / RegularOperation
  / Stringifier
  / ro:OptionalReadOnly a:AttributeRest {
      $a['readonly'] = ($ro !== null);
      return $a;
  }

IncludesStatement =
    target:identifier _ "includes" i_ incl:identifier _ ";" _ {
    return [
        'type' => 'includes',
        'target' => $target,
        'includes' => $incl,
    ];
}

CallbackRestOrInterface =
    CallbackRest
  / "interface" i_ name:identifier _ "{" _ m:CallbackInterfaceMembers "}" _ ";" _ {
    return [
        'type' => 'callback interface',
        'name' => $name,
        'inheritance' => null,
        'members' => $m,
        'partial' => false,
    ];
}

CallbackInterfaceMembers = (
    e:ExtendedAttributeList m:CallbackInterfaceMember {
      $m['extAttrs'] = $e; return $m;
    }
)*

CallbackInterfaceMember =
    Const
  / RegularOperation

Const =
    "const" i_ t:ConstType name:identifier _ "=" _ v:ConstValue ";" _ {
    return [
        'type' => 'const',
        'idlType' => $t,
        'name' => $name,
        'value' => $v,
    ];
}

ConstValue =
    BooleanLiteral
  / FloatLiteral
  / IntLiteral

BooleanLiteral =
    v:$( "true" / "false" ) i_ {
        return [ 'type' => 'boolean', 'value' => ($v === "true") ];
    }

FloatLiteral =
    s:$( decimal ) _ {
        return [ 'type' => 'number', 'value' => $s ];
    }
  / "-Infinity" i_ {
        return [ 'type' => 'Infinity', 'negative' => true ];
    }
  / "Infinity" i_ {
        return [ 'type' => 'Infinity', 'negative' => false ];
    }
  / "NaN" i_ {
        return [ 'type' => 'NaN' ];
    }

IntLiteral =
    s:$( i:integer ) _ {
        return [ 'type' => 'number', 'value' => $s ];
    }

ConstType =
    t:PrimitiveType {
        return [ 'type' => 'const-type', 'idlType' => $t ] + self::$basicType;
    }
  / t:identifier _ {
        return [ 'type' => 'const-type', 'idlType' => $t ] + self::$basicType;
    }

ReadOnlyMember = "readonly" i_ m:ReadOnlyMemberRest {
    $m['readonly'] = true; return $m;
}

ReadOnlyMemberRest =
    AttributeRest
  / MaplikeRest
  / SetlikeRest

ReadWriteAttribute =
    AttributeRest

InheritAttribute = "inherit" i_ a:AttributeRest {
    $a['special'] = 'inherit';
    return $a;
}

AttributeRest =
    "attribute" i_ t:TypeWithExtendedAttributes name:AttributeName ";" _ {
    return [
        'type' => 'attribute',
        'name' => $name,
        'special' => '',
        'readonly' => false,
        'idlType' => self::setType($t, 'attribute-type'),
    ];
}

AttributeName =
    AttributeNameKeyword
  / id:identifier _ { return $id; }

AttributeNameKeyword = id:$("async" / "required") i_ { return $id; }

OptionalReadOnly =
    ( "readonly" i_ { return true; })?

DefaultValue =
    ConstValue
  / s:string _ { return [ 'type' => 'string', 'value' => $s ]; }
  / "[" _ "]" _ { return [ 'type' => 'sequence', 'value' => [] ]; }
  / "{" _ "}" _ { return [ 'type' => 'dictionary' ]; }
  / "null" i_ { return [ 'type' => 'null' ]; }

Operation =
    RegularOperation
  / SpecialOperation

RegularOperation = t:Type o:OperationRest {
    $o['idlType'] = self::setType($t, 'return-type');
    return $o;
}

SpecialOperation = s:Special o:RegularOperation {
    $o['special'] = $s; return $o;
}

Special = s:$(
    "getter"
  / "setter"
  / "deleter" ) i_ { return $s; }

OperationRest = name:OptionalOperationName "(" _ args:ArgumentList ")" _ ";" _ {
    return [
        'type' => 'operation',
        'special' => '',
        'idlType' => null,
        'name' => $name,
        'arguments' => $args,
        'extAttrs' => null,
    ];
}

OptionalOperationName =
    OperationName?

OperationName =
    OperationNameKeyword
  / name:identifier _ { return $name; }

OperationNameKeyword = s:"includes" i_ { return $s; }

ArgumentList =
    a:Argument rest:Arguments { array_unshift($rest, $a); return $rest; }
  / "" { return []; }

Arguments =
    "," _ a:Argument rest:Arguments { array_unshift($rest, $a); return $rest; }
  / "" { return []; }

Argument =
    e:ExtendedAttributeList a:ArgumentRest {
        $a['extAttrs'] = $e; return $a;
    }

ArgumentRest =
    "optional" i_ t:TypeWithExtendedAttributes name:ArgumentName d:Default {
      return [
          'type' => 'argument',
          'default' => $d,
          'optional' => true,
          'variadic' => false,
          'idlType' => self::setType($t, 'argument-type'),
          'name' => $name,
      ];
  }
  / t:Type e:Ellipsis name:ArgumentName {
      return [
          'type' => 'argument',
          'default' => null,
          'optional' => false,
          'variadic' => ($e !== null),
          'idlType' => self::setType($t, 'argument-type'),
          'name' => $name,
      ];
  }

ArgumentName =
    ArgumentNameKeyword
  / name:identifier _ { return $name; }

Ellipsis = ("..." _)?

Constructor =
    "constructor" i_ "(" _ args:ArgumentList ")" _ ";" _ {
      return [
          'type' => 'constructor',
          'arguments' => $args,
      ];
  }

Stringifier =
    "stringifier" i_ rest:StringifierRest {
    $rest['special'] = 'stringifier';
    return $rest;
}

StringifierRest =
    ro:OptionalReadOnly a:AttributeRest {
    $a['readonly'] = ($ro !== null);
    return $a;
  }
  / RegularOperation
  / ";" _ {
    return [
        'type' => 'operation',
        'name' => '',
        'arguments' => [],
        'special' => 'stringifier',
    ];
}

StaticMember = "static" i_ rest:StaticMemberRest {
    $rest['special'] = 'static';
    return $rest;
}

StaticMemberRest =
    ro:OptionalReadOnly a:AttributeRest {
    $a['readonly'] = ($ro !== null);
    return $a;
  }
  / RegularOperation

Iterable =
    "iterable" i_ "<" _ t1:TypeWithExtendedAttributes t2:OptionalType ">" _ ";" _ {
        return [
            'type' => 'iterable',
            'idlType' => $t2 ? [ $t1, $t2 ] : [ $t1 ],
            'readonly' => false,
            'async' => false,
            'arguments' => [],
        ];
    }

OptionalType =
    ( "," _ t:TypeWithExtendedAttributes { return $t; } )?

AsyncIterable =
    "async" i_ "iterable" i_ "<" _ t1:TypeWithExtendedAttributes t2:OptionalType ">" _ args:OptionalArgumentList ";" _ {
        return [
            'type' => 'iterable',
            'idlType' => $t2 ? [ $t1, $t2 ] : [ $t1 ],
            'readonly' => false,
            'async' => true,
            'arguments' => $args ?? [],
        ];
    }

OptionalArgumentList =
    ( "(" _ args:ArgumentList ")" _ { return $args; } )?

ReadWriteMaplike =
    MaplikeRest

MaplikeRest =
    "maplike" i_ "<" _ t1:TypeWithExtendedAttributes "," _ t2:TypeWithExtendedAttributes ">" _ ";" _ {
        return [
            'type' => 'maplike',
            'idlType' => [ $t1, $t2 ],
            'readonly' => false,
            'async' => false,
            'arguments' => [],
        ];
    }

ReadWriteSetlike =
    SetlikeRest

SetlikeRest =
    "setlike" i_ "<" _ t:TypeWithExtendedAttributes ">" _ ";" _ {
         return [
             'type' => 'setlike',
             'idlType' => [ $t ],
             'readonly' => false,
             'async' => false,
             'arguments' => [],
         ];
    }

Namespace =
    "namespace" i_ name:identifier _ "{" _ m:NamespaceMembers "}" _ ";" _ {
    return [
        'type' => 'namespace',
        'name' => $name,
        'inheritance' => null,
        'partial' => false,
        'members' => $m,
    ];
}

NamespaceMembers = (
    e:ExtendedAttributeList m:NamespaceMember {
      $m['extAttrs'] = $e; return $m;
    }
)*

NamespaceMember =
    RegularOperation
  / "readonly" i_ a:AttributeRest { $a['readonly'] = true; return $a; }

Dictionary =
    "dictionary" i_ name:identifier _ inh:Inheritance "{" _ m:DictionaryMembers "}" _ ";" _ {
        return [
            'type' => 'dictionary',
            'name' => $name,
            'partial' => false,
            'members' => $m,
            'inheritance' => $inh,
        ];
    }

DictionaryMembers = DictionaryMember*

DictionaryMember = e:ExtendedAttributeList d:DictionaryMemberRest {
    $d['extAttrs'] = $e; return $d;
}

DictionaryMemberRest =
    "required" i_ t:TypeWithExtendedAttributes name:identifier _ ";" _ {
      return [
          'type' => 'field',
          'name' => $name,
          'required' => true,
          'idlType' => self::setType($t, 'dictionary-type'),
          'default' => null,
      ];
    }
  / t:Type name:identifier _ d:Default ";" _ {
      return [
          'type' => 'field',
          'name' => $name,
          'required' => false,
          'idlType' => self::setType($t, 'dictionary-type'),
          'default' => $d
      ];
  }

PartialDictionary =
    "dictionary" i_ name:identifier _ "{" _ m:DictionaryMembers "}" _ ";" _ {
       return [
           'type' => 'dictionary',
           'name' => $name,
           'partial' => true,
           'members' => $m,
           'inheritance' => null,
       ];
   }

Default = ( "=" _ val:DefaultValue { return $val; } )?

Enum = "enum" i_ name:identifier _ "{" _ vals:EnumValueList "}" _ ";" _ {
    return [
        'type' => 'enum',
        'name' => $name,
        'values' => $vals,
    ];
}

EnumValueList = s:string _ vals:EnumValueListComma {
    array_unshift($vals, [
        'type' => 'enum-value',
        'value' => $s,
    ]);
    return $vals;
}

EnumValueListComma =
    "," _ vals:EnumValueListString { return $vals; }
  / "" { return []; }

EnumValueListString =
    s:string _ vals:EnumValueListComma {
    array_unshift($vals, [
        'type' => 'enum-value',
        'value' => $s,
    ]);
    return $vals;
  }
  / "" { return []; }

CallbackRest = name:identifier _ "=" _ t:Type "(" _ args:ArgumentList ")" _ ";" _ {
    return [
        'type' => 'callback',
         'name' => $name,
         'idlType' => self::setType($t, 'return-type'),
         'arguments' => $args,
    ];
}

Typedef = "typedef" i_ t:TypeWithExtendedAttributes name:identifier _ ";" _ {
    return [
        'type' => 'typedef',
         'name' => $name,
         'idlType' => self::setType($t, 'typedef-type'),
    ];
}

Type =
    SingleType
  / t:UnionType n:Null { $t['nullable'] = ($n !== null); return $t; }

TypeWithExtendedAttributes =
    e:ExtendedAttributeList t:Type {
        $t['extAttrs'] = $e; return $t;
    }

SingleType =
    DistinguishableType
  / AnyType
  / PromiseType

AnyType =
    "any" i_ {
      return [ 'idlType' => 'any' ] + self::$basicType;
    }

UnionType =
    "(" _ t:UnionMemberType rest:("or" i_ t2:UnionMemberType { return $t2; })+ ")" _ {
        array_unshift($rest, $t);
        return [ 'idlType' => $rest, 'union' => true ] + self::$basicType;
    }

UnionMemberType =
    e:ExtendedAttributeList t:DistinguishableType {
        $t['extAttrs'] = $e; return $t;
    }
  / t:UnionType n:Null {
        $t['nullable'] = ($n !== null); return $t;
    }

DistinguishableType = dt:(
    t:PrimitiveType {
        return [ 'idlType' => $t ] + self::$basicType;
    }
  / t:StringType {
        return [ 'idlType' => $t ] + self::$basicType;
    }
  / t:("object"/"symbol") i_ {
        return [ 'idlType' => $t ] + self::$basicType;
    }
  / t:BufferRelatedType {
        return [ 'idlType' => $t ] + self::$basicType;
    }
  / g:("sequence" / "FrozenArray" / "ObservableArray") i_ "<" _ t:TypeWithExtendedAttributes ">" _ {
        return [ 'idlType' => [$t], 'generic' => $g ] + self::$basicType;
    }
  / RecordType
  / t:identifier _ {
      return [ 'idlType' => $t ] + self::$basicType;
  }
  ) n:Null { $dt['nullable'] = ($n !== null); return $dt; }

PrimitiveType =
    UnsignedIntegerType
  / UnrestrictedFloatType
  / v:$(
    "undefined"
  / "boolean"
  / "byte"
  / "octet"
  / "bigint" ) i_ { return $v; }

UnrestrictedFloatType =
    "unrestricted" i_ t:FloatType { return "unrestricted $t"; }
  / FloatType

FloatType =
    v:$( "float" / "double" ) i_ { return $v; }

UnsignedIntegerType =
    "unsigned" i_ t:IntegerType { return "unsigned $t"; }
  / IntegerType

IntegerType =
    s:$"short" i_ { return $s; }
  / "long" i_ l:("long" i_)? { return $l ? "long long" : "long"; }

StringType = s:$(
    "ByteString"
  / "DOMString"
  / "USVString" ) i_ { return $s; }

PromiseType =
    "Promise" i_ "<" _ t:Type ">" _ {
        if ( $t['idlType'] === 'void' ) { $t['type'] = 'return-type'; }
        return [ 'idlType' => [$t], 'generic' => 'Promise' ] + self::$basicType;
    }

RecordType =
    "record" i_ "<" _ t1:StringType "," _ t2:TypeWithExtendedAttributes ">" _ {
        $t1 = [ 'idlType' => $t1 ] + self::$basicType;
        return [ 'idlType' => [$t1,$t2], 'generic' => 'record' ] + self::$basicType;
    }

Null = ( "?" _ { return true; } )?

BufferRelatedType = s:$(
    "ArrayBuffer"
  / "DataView"
  / "Int8Array"
  / "Int16Array"
  / "Int32Array"
  / "Uint8Array"
  / "Uint16Array"
  / "Uint32Array"
  / "Uint8ClampedArray"
  / "Float32Array"
  / "Float64Array" ) i_ { return $s; }

ExtendedAttributeList =
    "[" _ e:ExtendedAttribute rest:ExtendedAttributes "]" _
    { array_unshift($rest, $e); return $rest; }
  / !"[" "" { return []; }

ExtendedAttributes =
    "," _ e:ExtendedAttribute rest:ExtendedAttributes
    { array_unshift($rest, $e); return $rest; }
  / "" { return []; }

ExtendedAttribute =
  /* Try to match the more-specific structures supported by webidl2.js */
    ExtendedAttributeNoArgs
  / ExtendedAttributeArgList
  / ExtendedAttributeIdent
  / ExtendedAttributeNamedArgList
  /* If these fail, fall back to the spec-compliant production */
  / $SpecCompliantExtendedAttribute

SpecCompliantExtendedAttribute =
    "(" _ ExtendedAttributeInner ")" _ ExtendedAttributeRest
  / "[" _ ExtendedAttributeInner "]" _ ExtendedAttributeRest
  / "{" _ ExtendedAttributeInner "}" _ ExtendedAttributeRest
  / Other+ ExtendedAttributeRest

ExtendedAttributeRest = SpecCompliantExtendedAttribute?

ExtendedAttributeInner =
    "(" _ ExtendedAttributeInner ")" _ ExtendedAttributeInner
  / "[" _ ExtendedAttributeInner "]" _ ExtendedAttributeInner
  / "{" _ ExtendedAttributeInner "}" _ ExtendedAttributeInner
  / OtherOrComma ExtendedAttributeInner
  / ""

Other =
    OtherIdLike
  / ArgumentNameKeyword
  / BufferRelatedType
  / c:$(
    integer
  / decimal
  / identifier
  / string
  / otherchar
  / otherterminals ) _ { return $c; }

OtherIdLike = c:$(
    "ByteString"
  / "DOMString"
  / "FrozenArray"
  / "Infinity"
  / "NaN"
  / "ObservableArray"
  / "Promise"
  / "USVString"
  / "any"
  / "bigint"
  / "boolean"
  / "byte"
  / "double"
  / "false"
  / "float"
  / "long"
  / "null"
  / "object"
  / "octet"
  / "or"
  / "optional"
  / "record"
  / "sequence"
  / "short"
  / "symbol"
  / "true"
  / "unsigned"
  / "undefined" ) i_ { return $c; }

otherterminals =
    "-"
  / "-Infinity"
  / "."
  / "..."
  / ":"
  / ";"
  / "<"
  / "="
  / ">"
  / "?"

OtherOrComma =
    Other
  / "," _

ExtendedAttributeNoArgs = name:identifier _ ![(=] {
    return [ 'name' => $name ] + self::$basicExtAttr;
}

ExtendedAttributeArgList = name:identifier _ "(" _ args:ArgumentList ")" _ {
    return [ 'name' => $name, 'arguments' => $args ] + self::$basicExtAttr;
}

ExtendedAttributeIdent = name:identifier _ "=" _ rhs:ExtendedAttributeRHS {
    return [
        'name' => $name,
        'rhs' => $rhs,
    ] + self::$basicExtAttr;
}

// This is an expanded production used by webidl2.js for certain types
// of extended attributes
ExtendedAttributeRHS =
    rhs:identifier _ !"(" {
        return [ 'type' => 'identifier', 'value' => $rhs ];
    }
  / "(" _ s:identifier _ rest:("," _ s2:identifier _ {return $s2;})* ")" _ {
        array_unshift($rest, $s);
        $val = array_map(function($item) {
            return [ 'value' => $item ];
        }, $rest);
        return [ 'type' => 'identifier-list', 'value' => $val ];
    }
  / s:$string _ {
        return [ 'type' => 'string', 'value' => $s ];
    }
  / "(" _ s:$string _ rest:("," _ s2:$string _ {return $s2;})* ")" _ {
        array_unshift($rest, $s);
        $val = array_map(function($item) {
            return [ 'value' => $item ];
        }, $rest);
        return [ 'type' => 'string-list', 'value' => $val ];
    }
  / s:$integer _ !"." {
        return [ 'type' => 'integer', 'value' => $s ];
    }
  / "(" _ s:$integer _ rest:("," _ s2:$integer _ {return $s2;})* ")" _ {
        array_unshift($rest, $s);
        $val = array_map(function($item) {
            return [ 'value' => $item ];
        }, $rest);
        return [ 'type' => 'integer-list', 'value' => $val ];
    }
  / s:$decimal _ {
        return [ 'type' => 'decimal', 'value' => $s ];
    }
  / "(" _ s:$decimal _ rest:("," _ s2:$decimal _ {return $s2;})* ")" _ {
        array_unshift($rest, $s);
        $val = array_map(function($item) {
            return [ 'value' => $item ];
        }, $rest);
        return [ 'type' => 'decimal-list', 'value' => $val ];
    }

ExtendedAttributeNamedArgList = name:identifier _ "=" _ rhs:identifier _ "(" _ args:ArgumentList ")" _ {
    return [
        'name' => $name,
        'arguments' => $args,
        'rhs' => [ 'type' => 'identifier', 'value' => $rhs ],
    ] + self::$basicExtAttr;
}
