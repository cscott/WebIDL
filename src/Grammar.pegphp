/**
 * Wikipeg grammar for reading WebIDL
 * 2021-01-27 C. Scott Ananian <cananian@wikimedia.org>
 */
{
/* File-scope initializer */
namespace Wikimedia\WebIDL;
}
{
	/** @var string */
	private $filename = '';
	/** @var int */
	private $lineNum = 1;

	/**
	 * @param string $filename
	 * @param string $contents
	 * @return array
	 */
	public static function load( string $filename, string $contents ) {
		$g = new Grammar();
		$g->filename = $filename;
		return $g->parse( $contents );
	}
}

start = _ Definitions

/* Line number bookkeeping.
 * Be careful about backtracking after you successfully match this production.
 */
eol = nl:("\n" / "\r\n" / "\r") { $this->lineNum++; return $nl; }

/* WebIDL terminals */
integer = m:opt_minus n:( decimal_integer / hex_integer / octal_integer ) {
	return m*n;
}

opt_minus = "-" { return -1; } / "" { return 1; }

decimal_integer = s:$( [1-9] [0-9]* ) { return intval($s); }

hex_integer = ("0x" / "0X" ) s:$( [0-9A-Fa-f]+ ) { return hexdec($s); }

octal_integer = s:$( "0" [0-7]* ) { return octdec( $s ); }

decimal = s:$( m:opt_minus (
	( [0-9]+ "." [0-9]* / [0-9]* "." [0-9]+ ) ( [Ee] [+-]? [0-9]+ )? /
	[0-9]+ [Ee] [+-]? [0-9]+
) ) { return floatval( $s ); }

identifier = s:$( [-_]? [A-Za-z] [-_0-9A-Za-z]* ) { return $s; }

string = "\"" s:$([^\"]*) "\"" { return $s; }

whitespace = ( [\t ] / eol )+

comment = "//" [^\n\r]* / "/*" ( [^\n\r*]+ / eol / "*" !"/" )* "*/"

otherchar = [^\t\n\r 0-9A-Za-z]
		   
/* The 'ignore' production -- we have to include this after every
 * terminal not defined above */
_ = ( whitespace / comment )*

/* WebIDL non-terminals */
Definitions = (ExtendedAttributeList Definition)*

Definition =
		   CallbackOrInterfaceOrMixin
		   / Namespace
		   / Partial
		   / Dictionary
		   / Enum
		   / Typedef
		   / IncludesStatement

ArgumentNameKeyword =
 ( "async"
 / "attribute"
 / "callback"
 / "const"
 / "constructor"
 / "deleter"
 / "dictionary"
 / "enum"
 / "getter"
 / "includes"
 / "inherit"
 / "interface"
 / "iterable"
 / "maplike"
 / "mixin"
 / "namespace"
 / "partial"
 / "readonly"
 / "required"
 / "setlike"
 / "setter"
 / "static"
 / "stringifier"
 / "typedef"
 / "unrestricted" ) _

CallbackOrInterfaceOrMixin =
	"callback" _ CallbackRestOrInterface
  / "interface" _ InterfaceOrMixin
InterfaceOrMixin = InterfaceRest / MixinRest
InterfaceRest =
    identifier _ Inheritance "{" _ InterfaceMembers "}" _ ";" _
Partial = "partial" _ PartialDefinition
PartialDefinition =
    "interface" _ PartialInterfaceOrPartialMixin
  / PartialDictionary
  / Namespace
PartialInterfaceOrPartialMixin =
	PartialInterfaceRest
  / MixinRest
PartialInterfaceRest =
	identifier _ "{" _ PartialInterfaceMembers "}" _ ";" _
InterfaceMembers = ( ExtendedAttributeList InterfaceMember )*
InterfaceMember =
	PartialInterfaceMember
  / Constructor
PartialInterfaceMembers = ( ExtendedAttributeList PartialInterfaceMember )*
PartialInterfaceMember =
	Const
  / Operation
  / Stringifier
  / StaticMember
  / Iterable
  / AsyncIterable
  / ReadOnlyMember
  / ReadWriteAttribute
  / ReadWriteMaplike
  / ReadWriteSetlike
  / InheritAttribute
Inheritance = ( ":" _ identifier _ )?
MixinRest = "mixin" _ identifier _ "{" _ MixinMembers "}" _ ";" _
MixinMembers = ( ExtendedAttributeList MixinMember )*
MixinMember =
	Const
  / RegularOperation
  / Stringifier
  / OptionalReadOnly AttributeRest

IncludesStatement = identifier _ "includes" _ identifier _ ";" _
		   
CallbackRestOrInterface =
	CallbackRest
  / "interface" _ identifier _ "{" _ CallbackInterfaceMembers "}" _ ";" _
CallbackInterfaceMembers = ( ExtendedAttributeList CallbackInterfaceMember )*
CallbackInterfaceMember =
	Const
  / RegularOperation

Const = "const" _ ConstType identifier _ "=" _ ConstValue ";" _
ConstValue =
   BooleanLiteral
 / FloatLiteral
 / i:integer _ { return $i; }
BooleanLiteral = "true" _ { return true; } / "false" _ { return false; }
FloatLiteral = f:decimal _ { return $f; }
	/ "-Infinity" _ { return -INF; }
	/ "Infinity" _ { return INF; }
	/ "NaN" _ { return NAN; }
ConstType = PrimitiveType
 / identifier _

ReadOnlyMember = "readonly" _ ReadOnlyMemberRest
ReadOnlyMemberRest =
   AttributeRest
 / MaplikeRest
 / SetlikeRest
ReadWriteAttribute =
   AttributeRest
InheritAttribute = "inherit" _ AttributeRest
AttributeRest = "attribute" _ TypeWithExtendedAttributes AttributeName ";" _
AttributeName = AttributeNameKeyword
 / identifier _
AttributeNameKeyword = ("async" / "required") _
OptionalReadOnly = ("readonly" _)?
DefaultValue =
   ConstValue
 / string _
 / "[" _ "]" _
 / "{" _ "}" _
 / "null" _

Operation =
   RegularOperation
 / SpecialOperation
RegularOperation = Type OperationRest
SpecialOperation = Special RegularOperation
Special = "getter" _
 / "setter" _
 / "deleter" _
OperationRest = OptionalOperationName "(" _ ArgumentList ")" _ ";" _
OptionalOperationName = OperationName?
OperationName =
   OperationNameKeyword
 / identifier _
OperationNameKeyword = "includes" _

ArgumentList = Argument Arguments / ""
Arguments = "," _ Argument Arguments / ""
Argument = ExtendedAttributeList ArgumentRest
ArgumentRest =
   "optional" _ TypeWithExtendedAttributes ArgumentName Default
 / Type Ellipsis ArgumentName
ArgumentName =
   ArgumentNameKeyword
 / identifier _
Ellipsis = ("..." _)?

Constructor =
   "constructor" _ "(" _ ArgumentList ")" _ ";" _
Stringifier =
   "stringifier" _ StringifierRest
StringifierRest =
   OptionalReadOnly AttributeRest
 / RegularOperation
 / ";" _
StaticMember = "static" _ StaticMemberRest
StaticMemberRest =
   OptionalReadOnly AttributeRest
 / RegularOperation
Iterable =
   "iterable" _ "<" _ TypeWithExtendedAttributes OptionalType ">" _ ";" _
OptionalType = ( "," _ TypeWithExtendedAttributes )?
AsyncIterable =
   "async" _ "iterable" _ "<" _ TypeWithExtendedAttributes OptionalType ">" _ OptionalArgumentList ";" _
OptionalArgumentList =
   "(" _ ArgumentList ")" _
 / ""
ReadWriteMaplike = MaplikeRest
MaplikeRest =
   "maplike" _ "<" _ TypeWithExtendedAttributes "," _ TypeWithExtendedAttributes ">" _ ";" _
ReadWriteSetlike = SetlikeRest
SetlikeRest =
   "setlike" _ "<" _ TypeWithExtendedAttributes ">" _ ";" _

Namespace =
   "namespace" _ identifier _ "{" _ NamespaceMembers "}" _ ";" _
NamespaceMembers = ( ExtendedAttributeList NamespaceMember )*
NamespaceMember =
   RegularOperation
 / "readonly" _ AttributeRest

Dictionary =
   "dictionary" _ identifier _ Inheritance "{" _ DictionaryMembers "}" _ ";" _
DictionaryMembers = DictionaryMember*
DictionaryMember = ExtendedAttributeList DictionaryMemberRest
DictionaryMemberRest =
   "required" _ TypeWithExtendedAttributes identifier _ ";" _
 / Type identifier _ Default ";" _
PartialDictionary =
   "dictionary" _ identifier _ "{" _ DictionaryMembers "}" _ ";" _
Default = ( "=" _ DefaultValue )?
Enum = "enum" _ identifier _ "{" _ EnumValueList "}" _ ";" _
EnumValueList = string _ EnumValueListComma
EnumValueListComma = ( "," _ EnumValueListString )?
EnumValueListString = ( string _ EnumValueListComma )?
CallbackRest = identifier _ "=" _ Type "(" _ ArgumentList ")" _ ";" _
Typedef = "typedef" _ TypeWithExtendedAttributes identifier _ ";" _

Type =
   SingleType
 / UnionType Null
TypeWithExtendedAttributes =
   ExtendedAttributeList Type
SingleType =
   DistinguishableType
 / "any" _
 / PromiseType
UnionType = "(" _ UnionMemberType ("or" _ UnionMemberType)+ ")" _
UnionMemberType =
   ExtendedAttributeList DistinguishableType
 / UnionType Null

DistinguishableType =
   PrimitiveType Null
 / StringType Null
 / identifier _ Null
 / "sequence" _ "<" _ TypeWithExtendedAttributes ">" _ Null
 / "object" _ Null
 / "symbol" _ Null
 / BufferRelatedType Null
 / "FrozenArray" _ "<" _ TypeWithExtendedAttributes ">" _ Null
 / "ObservableArray" _ "<" _ TypeWithExtendedAttributes ">" _ Null
 / RecordType Null
PrimitiveType =
   UnsignedIntegerType
 / UnrestrictedFloatType
 / "undefined" _
 / "boolean" _
 / "byte" _
 / "octet" _
 / "bigint" _
UnrestrictedFloatType =
   "unrestricted" _ FloatType
 / FloatType
FloatType = ( "float" / "double" ) _
UnsignedIntegerType =
   "unsigned" _ IntegerType
 / IntegerType
IntegerType =
   "short" _
 / "long" _ OptionalLong
OptionalLong = ( "long" _ )?

StringType =
   "ByteString" _
 / "DOMString" _
 / "USVString" _

PromiseType =
   "Promise" _ "<" _ Type ">" _
RecordType =
   "record" _ "<" _ StringType "," _ TypeWithExtendedAttributes ">" _
Null = ("?" _)?

BufferRelatedType =
 ( "ArrayBuffer"
 / "DataView"
 / "Int8Array"
 / "Int16Array"
 / "Int32Array"
 / "Uint8Array"
 / "Uint16Array"
 / "Uint32Array"
 / "Uint8ClampedArray"
 / "Float32Array"
 / "Float64Array" ) _

ExtendedAttributeList = "[" _ ExtendedAttribute ExtendedAttributes "]" _ / ""
ExtendedAttributes = "," _ ExtendedAttribute ExtendedAttributes / ""
ExtendedAttribute =
   "(" _ ExtendedAttributeInner ")" _ ExtendedAttributeRest
 / "[" _ ExtendedAttributeInner "]" _ ExtendedAttributeRest
 / "{" _ ExtendedAttributeInner "}" _ ExtendedAttributeRest
 / Other ExtendedAttributeRest
ExtendedAttributeRest = ExtendedAttribute?
ExtendedAttributeInner =
   "(" _ ExtendedAttributeInner ")" _ ExtendedAttributeInner
 / "[" _ ExtendedAttributeInner "]" _ ExtendedAttributeInner
 / "{" _ ExtendedAttributeInner "}" _ ExtendedAttributeInner
 / OtherOrComma ExtendedAttributeInner
 / ""
Other = (integer
 / decimal
 / identifier
 / string
 / otherchar
 / "-"
 / "-Infinity"
 / "."
 / "..."
 / ":"
 / ";"
 / "<"
 / "="
 / ">"
 / "?"
 / "ByteString"
 / "DOMString"
 / "FrozenArray"
 / "Infinity"
 / "NaN"
 / "ObservableArray"
 / "Promise"
 / "USVString"
 / "any"
 / "bigint"
 / "boolean"
 / "byte"
 / "double"
 / "false"
 / "float"
 / "long"
 / "null"
 / "object"
 / "octet"
 / "or"
 / "optional"
 / "record"
 / "sequence"
 / "short"
 / "symbol"
 / "true"
 / "unsigned"
 / "undefined" ) _
 / ArgumentNameKeyword
 / BufferRelatedType
OtherOrComma =
   Other
 / "," _
IdentifierList = identifier _ Identifiers
Identifiers = "," _ identifier _ Identifiers / ""
ExtendedAttributeNoArgs = identifier _
ExtendedAttributeArgList = identifier _ "(" _ ArgumentList ")" _
ExtendedAttributeIdent = identifier _ "=" _ identifier _
ExtendedAttributeIdentList = identifier _ "=" _ "(" _ IdentifierList ")" _
ExtendedAttributeNamedArgList = identifier _ "=" _ identifier _ "(" _ ArgumentList ")" _
