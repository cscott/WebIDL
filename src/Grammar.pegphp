/**
 * Wikipeg grammar for reading WebIDL
 * 2021-01-27 C. Scott Ananian <cananian@wikimedia.org>
 */
{
/* File-scope initializer */
namespace Wikimedia\WebIDL;
}
{
	/** @var string */
	private $filename = '';
	/** @var int */
	private $lineNum = 1;

	/**
	 * @param string $filename
	 * @param string $contents
	 * @return array
	 */
	public static function load( string $filename, string $contents ) {
		$g = new Grammar();
		$g->filename = $filename;
		return $g->parse( $contents );
	}
}

start = _ Definitions

/* Line number bookkeeping.
 * Be careful about backtracking after you successfully match this production.
 */
eol = nl:("\n" / "\r\n" / "\r") { $this->lineNum++; return $nl; }

/* WebIDL terminals */
integer = m:opt_minus n:( decimal_integer / hex_integer / octal_integer ) {
	return m*n;
}

opt_minus = "-" { return -1; } / "" { return 1; }

decimal_integer = s:$( [1-9] [0-9]* ) { return intval($s); }

hex_integer = ("0x" / "0X" ) s:$( [0-9A-Fa-f]+ ) { return hexdec($s); }

octal_integer = s:$( "0" [0-7]* ) { return octdec( $s ); }

float = s:$( m:opt_minus (
	( [0-9]+ "." [0-9]* / [0-9]* "." [0-9]+ ) ( [Ee] [+-]? [0-9]+ )? /
	[0-9]+ [Ee] [+-]? [0-9]+
) ) { return floatval( $s ); }

identifier = s:$( "_"? [A-Za-z] [-_0-9A-Za-z]* ) { return $s; }

string = "\"" s:$([^\"]*) "\"" { return $s; }

whitespace = ( [\t ] / eol )+

comment = "//" [^\n\r]* / "/*" ( [^\n\r*]+ / eol / "*" !"/" )* "*/"

otherchar = [^\t\n\r 0-9A-Za-z]
		   
/* The 'ignore' production -- we have to include this after every
 * terminal not defined above */
_ = ( whitespace / comment )*

/* WebIDL non-terminals */
Definitions = (ExtendedAttributeList Definition)*

Definition =
		   CallbackOrInterface
		   / Partial
		   / Dictionary
		   / Enum
		   / Typedef
		   / ImplementsStatement

CallbackOrInterface = "callback" _ CallbackRestOrInterface / Interface
CallbackRestOrInterface = CallbackRest / Interface
Interface =
    "interface" _ identifier _ Inheritance "{" _ InterfaceMembers "}" _ ";" _
Partial = "partial" _ PartialDefinition
PartialDefinition = PartialInterface / PartialDictionary
PartialInterface =
	"interface" _ identifier _ "{" _ InterfaceMembers "}" _ ";" _
InterfaceMembers = ( ExtendedAttributeList InterfaceMember )*
InterfaceMember = Const
		   / Operation
		   / Serializer
		   / Stringifier
		   / StaticMember
		   / Iterable
		   / ReadOnlyMember
		   / ReadWriteAttribute
Dictionary = "dictionary" _ identifier _ Inheritance "{" _ DictionaryMembers "}" _ ";" _
DictionaryMembers = (ExtendedAttributeList DictionaryMember)*
DictionaryMember = Required Type identifier _ Default ";" _
Required = "required" _ / ""
PartialDictionary = "dictionary" _ identifier _ "{" _ DictionaryMembers "}" _ ";" _
Default = ( "=" _ DefaultValue )?
DefaultValue = ConstValue
 / string _
 / "[" _ "]" _
Inheritance = ( ":" _ identifier _ )?
Enum = "enum" _ identifier _ "{" _ EnumValueList "}" _ ";" _
EnumValueList = string _ EnumValueListComma
EnumValueListComma = ( "," _ EnumValueListString )?
EnumValueListString = ( string _ EnumValueListComma )?
CallbackRest = identifier _ "=" _ ReturnType "(" _ ArgumentList ")" _ ";" _
Typedef = "typedef" _ Type identifier _ ";" _
ImplementsStatement = identifier _ "implements" _ identifier _ ";" _
Const = "const" _ ConstType identifier _ "=" _ ConstValue ";" _
ConstValue = BooleanLiteral
 / FloatLiteral
 / i:integer _ { return $i; }
 / "null" _ { return null; }
BooleanLiteral = "true" _ { return true; } / "false" _ { return false; }
FloatLiteral = f:float _ { return $f; }
	/ "-Infinity" _ { return -INF; }
	/ "Infinity" _ { return INF; }
	/ "NaN" _ { return NAN; }
Serializer = "serializer" _ SerializerRest
SerializerRest = OperationRest
 / "=" _ SerializationPattern ";" _
 / ";" _
SerializationPattern = "{" _ SerializationPatternMap "}" _
 / "[" _ SerializationPatternList "]" _
 / identifier _
SerializationPatternMap = "getter" _
 / "inherit" _ Identifiers
 / identifier _ Identifiers
 / ""
SerializationPatternList = "getter" _
 / identifier _ Identifiers
 / ""
Stringifier = "stringifier" _ StringifierRest
StringifierRest = ReadOnly AttributeRest
 / ReturnType OperationRest
 / ";" _
StaticMember = "static" _ StaticMemberRest
StaticMemberRest = ReadOnly AttributeRest
 / ReturnType OperationRest
ReadOnlyMember = "readonly" _ ReadOnlyMemberRest
ReadOnlyMemberRest = AttributeRest
ReadWriteAttribute = "inherit" _ ReadOnly AttributeRest
 / AttributeRest
AttributeRest = "attribute" _ Type AttributeName ";" _
AttributeName = AttributeNameKeyword
 / identifier _
AttributeNameKeyword = "required" _
Inherit = ("inherit" _)?
ReadOnly = ("readonly" _)?
Operation = ReturnType OperationRest
 / SpecialOperation
SpecialOperation = Special+ ReturnType OperationRest
Special = "getter" _
 / "setter" _
 / "deleter" _
 / "legacycaller" _
OperationRest = OptionalIdentifier "(" _ ArgumentList ")" _ ";" _
OptionalIdentifier = (identifier _)?
ArgumentList = Argument Arguments / ""
Arguments = "," _ Argument Arguments / ""
Argument = ExtendedAttributeList OptionalOrRequiredArgument
OptionalOrRequiredArgument = "optional" _ Type ArgumentName Default
 / Type Ellipsis ArgumentName
ArgumentName = ArgumentNameKeyword
 / identifier _
Ellipsis = ("..." _)?
Iterable = "iterable" _ "<" _ Type OptionalType ">" _ ";" _
OptionalType = ( "," _ Type )?
ExtendedAttributeList = "[" _ ExtendedAttribute ExtendedAttributes "]" _ / ""
ExtendedAttributes = "," _ ExtendedAttribute ExtendedAttributes / ""
ExtendedAttribute = "(" _ ExtendedAttributeInner ")" _ ExtendedAttributeRest
 / "[" _ ExtendedAttributeInner "]" _ ExtendedAttributeRest
 / "{" _ ExtendedAttributeInner "}" _ ExtendedAttributeRest
 / Other ExtendedAttributeRest
ExtendedAttributeRest = ExtendedAttribute?
ExtendedAttributeInner = "(" _ ExtendedAttributeInner ")" _ ExtendedAttributeInner
 / "[" _ ExtendedAttributeInner "]" _ ExtendedAttributeInner
 / "{" _ ExtendedAttributeInner "}" _ ExtendedAttributeInner
 / OtherOrComma ExtendedAttributeInner
 / ""
Other = (integer
 / float
 / identifier
 / string
 / otherchar
 / "-"
 / "-Infinity"
 / "."
 / "..."
 / ":"
 / ";"
 / "<"
 / "="
 / ">"
 / "?"
 / "ByteString"
 / "DOMString"
 / "Infinity"
 / "NaN"
 / "USVString"
 / "any"
 / "boolean"
 / "byte"
 / "double"
 / "false"
 / "float"
 / "long"
 / "null"
 / "object"
 / "octet"
 / "or"
 / "optional"
 / "sequence"
 / "short"
 / "true"
 / "unsigned"
 / "void" ) _
 / ArgumentNameKeyword
 / BufferRelatedType
ArgumentNameKeyword =
 ( "attribute"
 / "callback"
 / "const"
 / "deleter"
 / "dictionary"
 / "enum"
 / "getter"
 / "implements"
 / "inherit"
 / "interface"
 / "iterable"
 / "legacycaller"
 / "partial"
 / "required"
 / "serializer"
 / "setter"
 / "static"
 / "stringifier"
 / "typedef"
 / "unrestricted" ) _
OtherOrComma = Other
 / "," _
Type = SingleType
 / UnionType Null
SingleType = NonAnyType
 / "any" _
UnionType = "(" _ UnionMemberType ("or" _ UnionMemberType)+ ")" _
UnionMemberType = NonAnyType
 / UnionType Null
NonAnyType = PrimitiveType Null
 / PromiseType Null
 / "ByteString" _ Null
 / "DOMString" _ Null
 / "USVString" _ Null
 / identifier _ Null
 / "sequence" _ "<" _ Type ">" _ Null
 / "object" _ Null
 / "Error" _ Null
 / "DOMException" _ Null
 / BufferRelatedType Null
BufferRelatedType =
 ( "ArrayBuffer"
 / "DataView"
 / "Int8Array"
 / "Int16Array"
 / "Int32Array"
 / "Uint8Array"
 / "Uint16Array"
 / "Uint32Array"
 / "Uint8ClampedArray"
 / "Float32Array"
 / "Float64Array" ) _
ConstType = PrimitiveType Null
 / identifier _ Null
PrimitiveType = UnsignedIntegerType
 / UnrestrictedFloatType
 / "boolean" _
 / "byte" _
 / "octet" _
UnrestrictedFloatType = "unrestricted" _ FloatType
 / FloatType
FloatType = ("float" / "double") _
UnsignedIntegerType = "unsigned" _ IntegerType
 / IntegerType
IntegerType = "short" _
 / "long" _ OptionalLong
OptionalLong = ("long" _)?
PromiseType = "Promise" _ "<" _ ReturnType ">" _
Null = ("?" _)?
ReturnType = Type
 / "void" _
IdentifierList = identifier _ Identifiers
Identifiers = "," _ identifier _ Identifiers / ""
ExtendedAttributeNoArgs = identifier _
ExtendedAttributeArgList = identifier _ "(" _ ArgumentList ")" _
ExtendedAttributeIdent = identifier _ "=" _ identifier _
ExtendedAttributeIdentList = identifier _ "=" _ "(" _ IdentifierList ")" _
ExtendedAttributeNamedArgList = identifier _ "=" _ identifier _ "(" _ ArgumentList ")" _
